#include "StdAfx.h"
#include "FileMaker.h"
#include <string>

static const char hex_encode(int ch)
{
	static const char hex_code[]={"0123456789ABCDEF"};
	return hex_code[ch];
}

static int bin_to_hex(char* output, void* input, int len)
{
	int i;
	char* start;
	char* pch;
	start = output;
	pch = (char*)input;
	for(i=0; i<len; i++)
	{
		*output++ = '0';
		*output++ = 'x';
		*output++ = hex_encode((*pch>>4)&0x0F);
		*output++ = hex_encode((*pch)&0x0F);
		*output++ = ',';
		if((i&0xF)==0xF)
		{
			*output++ = '\r';
			*output++ = '\n';
		}
		pch++;
	}
	*output = 0;
	return (int)(output-start);
}

static int UnicodeToUTF8(const WCHAR* input, char* output, int size)
{
	memset(output, 0, size);
	return WideCharToMultiByte(CP_UTF8, 0, input, 1, output, size, NULL, NULL);
}

static void WriteString(CFile *file, char *buf, int buf_size, char *fmt, ...)
{
	va_list va;
	va_start(va, fmt);
	int ret = vsnprintf_s(buf, buf_size, buf_size, fmt, va);
	va_end(va);
	file->Write(buf, ret);
}

static void StringAppend(std::string& str, char *buffer, int buf_size, char *fmt, ...)
{
	va_list va;
	va_start(va, fmt);
	int ret = vsnprintf_s(buffer, buf_size, buf_size, fmt, va);
	va_end(va);
	str += buffer;
}

//生成CPP文件
BOOL CFileMaker::MakeCppFile(CBitFont* pBitFont, CCharset* pCharset, CFile *pFile, BOOL vert_scan, BOOL msb, BOOL monospace, _ProgressCallback cbProcess, void* cbData)
{
	INT   count;
	INT   len;
	WCHAR ch;
	char  utf8[8];
	char* text;
	UINT  text_size;
	BYTE* bits;
	UINT  bits_size;
	std::string strOutput;

	bits_size = pBitFont->GetBits(NULL,0,vert_scan,msb,!monospace);
	bits = (BYTE*)malloc(bits_size);
	if(bits == NULL)
	{
		return FALSE;
	}
	
	text_size = bits_size * 8 + 64;
	text = (char*)malloc(text_size);
	if(text == NULL)
	{
		free(bits);
		return FALSE;
	}
	count = pCharset->GetCharCount();

	strOutput += "/*******************************************************************************\r\n";
	strOutput += "* This file is generated by the Bitmap FontMaker.\r\n";
	strOutput += "* refer: https://gitee.com/kerndev/FontMaker\r\n";
	strOutput += "/*******************************************************************************\r\n";
	StringAppend(strOutput, text, text_size, "#define FONT_MONOSPACE  %d\r\n", monospace);
	StringAppend(strOutput, text, text_size, "#define FONT_WIDTH      %d\r\n", pBitFont->m_nWidth);
	StringAppend(strOutput, text, text_size, "#define FONT_HEIGHT     %d\r\n", pBitFont->m_nHeight);
	StringAppend(strOutput, text, text_size, "#define FONT_BPP        %d\r\n", pBitFont->m_nFontBpp);
	StringAppend(strOutput, text, text_size, "#define FONT_PITCH      %d\r\n", (pBitFont->m_nWidth * pBitFont->m_nFontBpp + 7) / 8);
	StringAppend(strOutput, text, text_size, "#define FONT_CHAR_COUNT %d\r\n\r\n", count);
	StringAppend(strOutput, text, text_size, "static const unsigned char *m_char_table=\"");

	for(int i=0; i<count; i++)
	{
		ch = pCharset->GetChar(i);
		UnicodeToUTF8(&ch, utf8, 8);
		StringAppend(strOutput, text, text_size, "%s", utf8);
	}
	StringAppend(strOutput, text, text_size, "\";\r\n\r");
	StringAppend(strOutput, text, text_size, "static const unsigned char  m_char_bits[][%d]=\r\n{\r\n",bits_size);

	clock_t beginClock = clock();
	clock_t lastClock = clock();
	clock_t lastSpeedClock = clock();
	clock_t curClock = clock();
	size_t lastSpeedCount = 0;

	for(int i = 0; i < count; i++)
	{
		ch = pCharset->GetChar(i);
		UnicodeToUTF8(&ch, utf8, 8);
		StringAppend(strOutput, text, text_size, "//U+%04X(%s)\r\n", ch, utf8);
		pBitFont->PaintChar(ch);
		len = pBitFont->GetBits(bits,bits_size,vert_scan,msb,!monospace);
		len = bin_to_hex(text,bits,len);
		StringAppend(strOutput, text, text_size, "%s\r\n", text);

		// 100毫秒更新一次进度, 过于频繁会影响性能
		curClock = clock();
		if (cbProcess && (curClock - lastClock >= 100 || (i + 1 == count)))
		{
			double costTime = (double)(curClock - beginClock) / 1000.0f;
			static double lastSpeed = 0.0f;
			double remainTime = (((double)count - (double)(i + 1)) / lastSpeed);
			double progress = (double)((i + 1) * 100) / (double)count;

			// 速度统计
			if (curClock - lastSpeedClock >= 500)
			{
				lastSpeed = (double)(i + 1 - lastSpeedCount) / ((double)(curClock - lastSpeedClock) / 1000.0f);
				lastSpeedCount = i + 1;
				lastSpeedClock = curClock;
			}

			// 记录上次时间滴答
			lastClock = curClock;

			if (!cbProcess(cbData, progress, i + 1, count, lastSpeed, costTime, remainTime))
			{
				break;
			}
		}
	}
	strOutput += "};\r\n";

	pFile->Write(strOutput.data(), strOutput.size());
	free(bits);
	free(text);
	return TRUE;
}

//生成BIN文件
BOOL CFileMaker::MakeBinFile(CBitFont* pBitFont, CCharset* pCharset, CFile *pFile, BOOL vert_scan, BOOL msb, BOOL monospace, _ProgressCallback cbProcess, void* cbData)
{
	INT i;
	INT count;
	INT size;
	WCHAR ch;
	BYTE* bits;
	UINT  bits_size;
	bits_size = pBitFont->GetBits(NULL,0,vert_scan,msb,!monospace);
	bits = (BYTE*)malloc(bits_size);
	if(bits==NULL)
	{
		return FALSE;
	}

	clock_t beginClock = clock();
	clock_t lastClock = clock();
	clock_t lastSpeedClock = clock();
	clock_t curClock = clock();
	size_t lastSpeedCount = 0;

	count = pCharset->GetCharCount();
	for(i = 0;i < count;i++)
	{
		ch = pCharset->GetChar(i);
		pBitFont->PaintChar(ch);
		size = pBitFont->GetBits(bits,bits_size,vert_scan,msb,!monospace);
		pFile->Write(bits,size);

		// 100毫秒更新一次进度, 过于频繁会影响性能
		curClock = clock();
		if (cbProcess && (curClock - lastClock >= 100 || (i + 1 == count)))
		{
			double costTime = (double)(curClock - beginClock) / 1000.0f;
			static double lastSpeed = 0.0f;
			double remainTime = (((double)count - (double)(i + 1)) / lastSpeed);
			double progress = (double)((i + 1) * 100) / (double)count;

			// 速度统计
			if (curClock - lastSpeedClock >= 500)
			{
				lastSpeed = (double)(i + 1 - lastSpeedCount) / ((double)(curClock - lastSpeedClock) / 1000.0f);
				lastSpeedCount = i + 1;
				lastSpeedClock = curClock;
			}

			// 记录上次时间滴答
			lastClock = curClock;

			if (!cbProcess(cbData, progress, i + 1, count, lastSpeed, costTime, remainTime))
			{
				break;
			}
		}
	}

	free(bits);
	return TRUE;
}
